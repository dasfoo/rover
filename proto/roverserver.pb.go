// Code generated by protoc-gen-go.
// source: roverserver.proto
// DO NOT EDIT!

/*
Package roverserver is a generated protocol buffer package.

It is generated from these files:
	roverserver.proto

It has these top-level messages:
	RoverWheelRequest
	RoverWheelResponse
	BoardInfoRequest
	BoardInfoResponse
*/
package roverserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// The request message containing command for right and left wheels
type RoverWheelRequest struct {
	Left  int32 `protobuf:"varint,1,opt,name=left" json:"left,omitempty"`
	Right int32 `protobuf:"varint,2,opt,name=right" json:"right,omitempty"`
}

func (m *RoverWheelRequest) Reset()                    { *m = RoverWheelRequest{} }
func (m *RoverWheelRequest) String() string            { return proto.CompactTextString(m) }
func (*RoverWheelRequest) ProtoMessage()               {}
func (*RoverWheelRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// The response message containing
type RoverWheelResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *RoverWheelResponse) Reset()                    { *m = RoverWheelResponse{} }
func (m *RoverWheelResponse) String() string            { return proto.CompactTextString(m) }
func (*RoverWheelResponse) ProtoMessage()               {}
func (*RoverWheelResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type BoardInfoRequest struct {
}

func (m *BoardInfoRequest) Reset()                    { *m = BoardInfoRequest{} }
func (m *BoardInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*BoardInfoRequest) ProtoMessage()               {}
func (*BoardInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// The response message containing info about board
type BoardInfoResponse struct {
	Battery     int32 `protobuf:"varint,1,opt,name=battery" json:"battery,omitempty"`
	Light       int32 `protobuf:"varint,2,opt,name=light" json:"light,omitempty"`
	Temperature int32 `protobuf:"varint,3,opt,name=temperature" json:"temperature,omitempty"`
	Humidity    int32 `protobuf:"varint,4,opt,name=humidity" json:"humidity,omitempty"`
}

func (m *BoardInfoResponse) Reset()                    { *m = BoardInfoResponse{} }
func (m *BoardInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*BoardInfoResponse) ProtoMessage()               {}
func (*BoardInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*RoverWheelRequest)(nil), "RoverWheelRequest")
	proto.RegisterType((*RoverWheelResponse)(nil), "RoverWheelResponse")
	proto.RegisterType((*BoardInfoRequest)(nil), "BoardInfoRequest")
	proto.RegisterType((*BoardInfoResponse)(nil), "BoardInfoResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for RoverService service

type RoverServiceClient interface {
	// Send command for movement
	MoveRover(ctx context.Context, in *RoverWheelRequest, opts ...grpc.CallOption) (*RoverWheelResponse, error)
	GetBoardInfo(ctx context.Context, in *BoardInfoRequest, opts ...grpc.CallOption) (*BoardInfoResponse, error)
}

type roverServiceClient struct {
	cc *grpc.ClientConn
}

func NewRoverServiceClient(cc *grpc.ClientConn) RoverServiceClient {
	return &roverServiceClient{cc}
}

func (c *roverServiceClient) MoveRover(ctx context.Context, in *RoverWheelRequest, opts ...grpc.CallOption) (*RoverWheelResponse, error) {
	out := new(RoverWheelResponse)
	err := grpc.Invoke(ctx, "/RoverService/MoveRover", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roverServiceClient) GetBoardInfo(ctx context.Context, in *BoardInfoRequest, opts ...grpc.CallOption) (*BoardInfoResponse, error) {
	out := new(BoardInfoResponse)
	err := grpc.Invoke(ctx, "/RoverService/GetBoardInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoverService service

type RoverServiceServer interface {
	// Send command for movement
	MoveRover(context.Context, *RoverWheelRequest) (*RoverWheelResponse, error)
	GetBoardInfo(context.Context, *BoardInfoRequest) (*BoardInfoResponse, error)
}

func RegisterRoverServiceServer(s *grpc.Server, srv RoverServiceServer) {
	s.RegisterService(&_RoverService_serviceDesc, srv)
}

func _RoverService_MoveRover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoverWheelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoverServiceServer).MoveRover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoverService/MoveRover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoverServiceServer).MoveRover(ctx, req.(*RoverWheelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoverService_GetBoardInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoverServiceServer).GetBoardInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoverService/GetBoardInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoverServiceServer).GetBoardInfo(ctx, req.(*BoardInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoverService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RoverService",
	HandlerType: (*RoverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MoveRover",
			Handler:    _RoverService_MoveRover_Handler,
		},
		{
			MethodName: "GetBoardInfo",
			Handler:    _RoverService_GetBoardInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x91, 0x3f, 0x4f, 0xc3, 0x30,
	0x10, 0xc5, 0x9b, 0xfe, 0x01, 0x7a, 0x74, 0x68, 0x0e, 0x24, 0xa2, 0x4e, 0x95, 0x27, 0x26, 0x0f,
	0x54, 0x82, 0x89, 0x25, 0x4b, 0xc5, 0x80, 0x54, 0x05, 0x24, 0xe6, 0xb4, 0xb9, 0xfc, 0x91, 0x92,
	0x3a, 0x9c, 0x1d, 0xa4, 0x4e, 0x88, 0xaf, 0xc2, 0x27, 0x25, 0x31, 0x6d, 0x88, 0xc8, 0x62, 0xf9,
	0xf7, 0x4e, 0x3e, 0xbf, 0x77, 0x07, 0x2e, 0xab, 0x0f, 0x62, 0x4d, 0x5c, 0x9f, 0xb2, 0x64, 0x65,
	0x94, 0x78, 0x04, 0x37, 0x68, 0xc4, 0xb7, 0x94, 0x28, 0x0f, 0xe8, 0xbd, 0x22, 0x6d, 0x10, 0x61,
	0x9c, 0x53, 0x6c, 0x3c, 0x67, 0xe9, 0xdc, 0x4e, 0x02, 0x7b, 0xc7, 0x6b, 0x98, 0x70, 0x96, 0xa4,
	0xc6, 0x1b, 0x5a, 0xf1, 0x17, 0x84, 0x04, 0xec, 0x3e, 0xd7, 0xa5, 0xda, 0x6b, 0x42, 0x0f, 0xce,
	0x0b, 0xd2, 0x3a, 0x4c, 0xc8, 0xb6, 0x98, 0x06, 0x27, 0x14, 0x08, 0x73, 0x5f, 0x85, 0x1c, 0x3d,
	0xed, 0x63, 0x75, 0xfc, 0x4d, 0x7c, 0x39, 0xe0, 0x76, 0xc4, 0xbf, 0x1e, 0xdb, 0xd0, 0x18, 0xe2,
	0xc3, 0xd1, 0xc6, 0x09, 0x1b, 0x27, 0x79, 0xd7, 0x89, 0x05, 0x5c, 0xc2, 0xa5, 0xa1, 0xa2, 0x24,
	0x0e, 0x4d, 0xc5, 0xe4, 0x8d, 0x6c, 0xad, 0x2b, 0xe1, 0x02, 0x2e, 0xd2, 0xaa, 0xc8, 0xa2, 0xcc,
	0x1c, 0xbc, 0xb1, 0x2d, 0xb7, 0x7c, 0xf7, 0x09, 0x33, 0x9b, 0xe3, 0xa5, 0x9e, 0x4d, 0xb6, 0x23,
	0xbc, 0x87, 0xe9, 0x73, 0xcd, 0x56, 0x43, 0x94, 0xbd, 0x11, 0x2d, 0xae, 0x64, 0x3f, 0xb7, 0x18,
	0xe0, 0x03, 0xcc, 0xd6, 0x64, 0xda, 0x34, 0xe8, 0xca, 0xff, 0x71, 0x17, 0x28, 0x7b, 0x61, 0xc5,
	0xc0, 0x5f, 0xc1, 0x4d, 0x14, 0xea, 0x58, 0x29, 0x99, 0x70, 0xb9, 0x93, 0x9d, 0x45, 0xf9, 0xf3,
	0xd6, 0x19, 0xf1, 0xa6, 0x59, 0xda, 0xc6, 0xf9, 0x1e, 0x8e, 0x82, 0xd7, 0xf5, 0xf6, 0xcc, 0xee,
	0x70, 0xf5, 0x13, 0x00, 0x00, 0xff, 0xff, 0x78, 0x7c, 0x3a, 0x1e, 0xd8, 0x01, 0x00, 0x00,
}
