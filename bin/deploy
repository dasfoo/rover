#!/bin/sh -e

deploy_env() {
	# TODO: use arm-linux-gnueabihf-gcc (note the 'hf'), take CGO_CFLAGS from
	# $ gcc -mcpu=native -march=native -Q --help=target
	# Currently it's
	# -march=armv6zk -mcpu=arm1176jz-s -mfloat-abi=hard -mfpu=vfp
	# but dies randomly with SIGSEGV or SIGILL.
	cat <<'ENV'
CGO_ENABLED=1
CC=arm-linux-gnueabi-gcc
GOOS=linux
GOARCH=arm
GOARM=5
ENV
}

ssh_port=$((31416+22))
ssh_user=pi
ssh_host="$ssh_user"@rover.dasfoo.org
ssh_fallback_host="$ssh_user"@fb.rover.dasfoo.org

deploy_ssh() {
	# Set a reasonable timeout for the first connection, which may fail.
	# We're expecting to expand "$@" on client side.
	# shellcheck disable=SC2029
	ssh -o ConnectTimeout=10 -p "$ssh_port" "$ssh_host" "$@" || ret="$?"
	if [ "$ret" -eq 255 ]; then
		# shellcheck disable=SC2029
		ssh -p "$ssh_port" "$ssh_fallback_host" "$@"
	else
		return "$ret"
	fi
}

deploy_copy() {
	tar cpf - "${1?source required}" | deploy_ssh 'tar xf -'
}

deploy_push() {
	(
		package_path="$(readlink -fm "$0/../..")"
		cd "$package_path"
		# propagade the following environment variables to "go build"
		set -a
		eval "$(deploy_env)"
		go build
		cd ..
		package="$(basename "$package_path")"
		deploy_copy "$package"
		deploy_ssh "
			sudo sh -ec '
				ln -sf \$PWD/$package/systemd/rover.service \
					/etc/systemd/system/multi-user.target.wants/
				systemctl daemon-reload
				# restarting will break reverse-tunnel together with our
				# ssh connection; do it in background.
				nohup sh -c \
					\"sleep 1; systemctl --no-block restart $package\" \
					</dev/null >/dev/null 2>&1 &
			'
		"
	)
}

COMMAND=${1?no command specified}
shift
"deploy_${COMMAND}" "$@"
